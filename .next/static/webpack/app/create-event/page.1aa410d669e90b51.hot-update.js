"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/create-event/page",{

/***/ "(app-pages-browser)/./lib/firebase.ts":
/*!*************************!*\
  !*** ./lib/firebase.ts ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   auth: () => (/* binding */ auth),\n/* harmony export */   createApplication: () => (/* binding */ createApplication),\n/* harmony export */   createEvent: () => (/* binding */ createEvent),\n/* harmony export */   db: () => (/* binding */ db),\n/* harmony export */   debugCollections: () => (/* binding */ debugCollections),\n/* harmony export */   deleteEvent: () => (/* binding */ deleteEvent),\n/* harmony export */   getApplicationsByEvent: () => (/* binding */ getApplicationsByEvent),\n/* harmony export */   getApplicationsByUser: () => (/* binding */ getApplicationsByUser),\n/* harmony export */   getEvents: () => (/* binding */ getEvents),\n/* harmony export */   getEventsByOwner: () => (/* binding */ getEventsByOwner),\n/* harmony export */   storage: () => (/* binding */ storage),\n/* harmony export */   updateApplicationStatus: () => (/* binding */ updateApplicationStatus),\n/* harmony export */   updateEvent: () => (/* binding */ updateEvent)\n/* harmony export */ });\n/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/app */ \"(app-pages-browser)/./node_modules/firebase/app/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/auth */ \"(app-pages-browser)/./node_modules/firebase/auth/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_storage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! firebase/storage */ \"(app-pages-browser)/./node_modules/firebase/storage/dist/esm/index.esm.js\");\n\n\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCiJFSq3_sy4wDN2QncaNyqO1MlSmtDn2Q\",\n    authDomain: \"volunteer-a61d3.firebaseapp.com\",\n    projectId: \"volunteer-a61d3\",\n    storageBucket: \"volunteer-a61d3.firebasestorage.app\",\n    messagingSenderId: \"783753586865\",\n    appId: \"1:783753586865:web:84a3f071e33a4934da9a90\",\n    measurementId: \"G-F2W8TS7GB9\"\n};\nconst app = (0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp)(firebaseConfig);\nconst auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)(app);\nconst db = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getFirestore)(app);\nconst storage = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_3__.getStorage)(app);\n// Helper function to convert Firestore timestamps\nconst convertTimestamp = (data)=>{\n    const converted = {\n        ...data\n    };\n    Object.keys(converted).forEach((key)=>{\n        if (converted[key] instanceof firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.Timestamp) {\n            converted[key] = converted[key].toDate().toISOString();\n        }\n    });\n    return converted;\n};\n// Event functions\nconst createEvent = async (eventData)=>{\n    try {\n        console.log('Creating event with data:', eventData);\n        const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, 'events'), {\n            ...eventData,\n            createdAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.Timestamp.now(),\n            updatedAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.Timestamp.now()\n        });\n        console.log('Event created with ID:', docRef.id);\n        return docRef;\n    } catch (error) {\n        console.error('Error creating event:', error);\n        throw error;\n    }\n};\nconst getEvents = async ()=>{\n    try {\n        console.log('Fetching all events...');\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, 'events'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.orderBy)('createdAt', 'desc'));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(q);\n        const events = querySnapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...convertTimestamp(doc.data())\n            }));\n        console.log('Events fetched:', events.length);\n        return events;\n    } catch (error) {\n        console.error('Error fetching events:', error);\n        throw error;\n    }\n};\nconst getEventsByOwner = async (ownerId)=>{\n    try {\n        console.log('Fetching events for owner:', ownerId);\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, 'events'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)('ownerId', '==', ownerId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.orderBy)('createdAt', 'desc'));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(q);\n        const events = querySnapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...convertTimestamp(doc.data())\n            }));\n        console.log(\"Events fetched for owner \".concat(ownerId, \":\"), events.length);\n        return events;\n    } catch (error) {\n        console.error('Error fetching events by owner:', error);\n        // Fix: Proper type checking for FirestoreError\n        if (error instanceof Error && 'code' in error && error.code === 'failed-precondition') {\n            console.log('Retrying without orderBy due to missing index...');\n            try {\n                const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, 'events'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)('ownerId', '==', ownerId));\n                const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(q);\n                const events = querySnapshot.docs.map((doc)=>({\n                        id: doc.id,\n                        ...convertTimestamp(doc.data())\n                    }));\n                // Sort manually by createdAt\n                events.sort((a, b)=>new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n                console.log(\"Events fetched for owner \".concat(ownerId, \" (without index):\"), events.length);\n                return events;\n            } catch (retryError) {\n                console.error('Retry failed:', retryError);\n                throw retryError;\n            }\n        }\n        throw error;\n    }\n};\nconst updateEvent = async (eventId, updates)=>{\n    try {\n        console.log(\"Updating event \".concat(eventId, \":\"), updates);\n        const eventRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, 'events', eventId);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.updateDoc)(eventRef, {\n            ...updates,\n            updatedAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.Timestamp.now()\n        });\n        console.log(\"Event \".concat(eventId, \" updated successfully\"));\n    } catch (error) {\n        console.error('Error updating event:', error);\n        throw error;\n    }\n};\nconst deleteEvent = async (eventId)=>{\n    try {\n        console.log('Deleting event:', eventId);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.deleteDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, 'events', eventId));\n        console.log(\"Event \".concat(eventId, \" deleted successfully\"));\n    } catch (error) {\n        console.error('Error deleting event:', error);\n        throw error;\n    }\n};\n// Application functions\nconst createApplication = async (applicationData)=>{\n    try {\n        console.log('Creating application with data:', applicationData);\n        const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, 'applications'), {\n            ...applicationData,\n            status: 'pending',\n            createdAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.Timestamp.now()\n        });\n        console.log('Application created with ID:', docRef.id);\n        return docRef;\n    } catch (error) {\n        console.error('Error creating application:', error);\n        throw error;\n    }\n};\nconst getApplicationsByEvent = async (eventId)=>{\n    try {\n        console.log('Fetching applications for event:', eventId);\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, 'applications'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)('eventId', '==', eventId));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(q);\n        const applications = querySnapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...convertTimestamp(doc.data())\n            }));\n        console.log(\"Applications fetched for event \".concat(eventId, \":\"), applications.length);\n        return applications;\n    } catch (error) {\n        console.error('Error fetching applications by event:', error);\n        throw error;\n    }\n};\nconst getApplicationsByUser = async (userId)=>{\n    try {\n        console.log('Fetching applications for user:', userId);\n        // First try with orderBy\n        try {\n            const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, 'applications'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)('userId', '==', userId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.orderBy)('createdAt', 'desc'));\n            const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(q);\n            const applications = querySnapshot.docs.map((doc)=>({\n                    id: doc.id,\n                    ...convertTimestamp(doc.data())\n                }));\n            console.log(\"Applications fetched for user \".concat(userId, \":\"), applications.length);\n            return applications;\n        } catch (indexError) {\n            // Fix: Proper type checking for FirestoreError\n            if (indexError instanceof Error && 'code' in indexError && indexError.code === 'failed-precondition') {\n                console.log('Index not found, fetching without orderBy and sorting manually...');\n                const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, 'applications'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)('userId', '==', userId));\n                const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(q);\n                const applications = querySnapshot.docs.map((doc)=>({\n                        id: doc.id,\n                        ...convertTimestamp(doc.data())\n                    }));\n                // Fix: Proper type assertion for date strings\n                applications.sort((a, b)=>{\n                    const dateA = new Date(a.createdAt).getTime();\n                    const dateB = new Date(b.createdAt).getTime();\n                    return dateB - dateA;\n                });\n                console.log(\"Applications fetched for user \".concat(userId, \" (manual sort):\"), applications.length);\n                return applications;\n            }\n            throw indexError;\n        }\n    } catch (error) {\n        console.error('Error fetching applications by user:', error);\n        throw error;\n    }\n};\nconst updateApplicationStatus = async (applicationId, status)=>{\n    try {\n        console.log(\"Updating application \".concat(applicationId, \" status to:\"), status);\n        const applicationRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, 'applications', applicationId);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.updateDoc)(applicationRef, {\n            status,\n            updatedAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.Timestamp.now()\n        });\n        console.log(\"Application \".concat(applicationId, \" status updated successfully\"));\n    } catch (error) {\n        console.error('Error updating application status:', error);\n        throw error;\n    }\n};\n// Debug function to check collections\nconst debugCollections = async ()=>{\n    try {\n        console.log('=== DEBUG: Checking collections ===');\n        // Check events collection\n        const eventsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, 'events'));\n        console.log('Events collection size:', eventsSnapshot.size);\n        eventsSnapshot.docs.forEach((doc)=>{\n            console.log('Event:', doc.id, doc.data());\n        });\n        // Check applications collection\n        const applicationsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, 'applications'));\n        console.log('Applications collection size:', applicationsSnapshot.size);\n        applicationsSnapshot.docs.forEach((doc)=>{\n            console.log('Application:', doc.id, doc.data());\n        });\n        console.log('=== END DEBUG ===');\n    } catch (error) {\n        console.error('Debug error:', error);\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFjO0lBQzNDLEVBQUUsT0FBT2xDLE9BQU87UUFDZFAsUUFBUU8sS0FBSyxDQUFDLHNDQUFzQ0E7UUFDcEQsTUFBTUE7SUFDUjtBQUNGLEVBQUM7QUFFRCxzQ0FBc0M7QUFDL0IsTUFBTW9DLG1CQUFtQjtJQUM5QixJQUFJO1FBQ0YzQyxRQUFRQyxHQUFHLENBQUM7UUFFWiwwQkFBMEI7UUFDMUIsTUFBTTJDLGlCQUFpQixNQUFNNUUsMkRBQU9BLENBQUNGLDhEQUFVQSxDQUFDcUIsSUFBSTtRQUNwRGEsUUFBUUMsR0FBRyxDQUFDLDJCQUEyQjJDLGVBQWVDLElBQUk7UUFDMURELGVBQWVoQyxJQUFJLENBQUNsQixPQUFPLENBQUN6QixDQUFBQTtZQUMxQitCLFFBQVFDLEdBQUcsQ0FBQyxVQUFVaEMsSUFBSXFDLEVBQUUsRUFBRXJDLElBQUlxQixJQUFJO1FBQ3hDO1FBRUEsZ0NBQWdDO1FBQ2hDLE1BQU13RCx1QkFBdUIsTUFBTTlFLDJEQUFPQSxDQUFDRiw4REFBVUEsQ0FBQ3FCLElBQUk7UUFDMURhLFFBQVFDLEdBQUcsQ0FBQyxpQ0FBaUM2QyxxQkFBcUJELElBQUk7UUFDdEVDLHFCQUFxQmxDLElBQUksQ0FBQ2xCLE9BQU8sQ0FBQ3pCLENBQUFBO1lBQ2hDK0IsUUFBUUMsR0FBRyxDQUFDLGdCQUFnQmhDLElBQUlxQyxFQUFFLEVBQUVyQyxJQUFJcUIsSUFBSTtRQUM5QztRQUVBVSxRQUFRQyxHQUFHLENBQUM7SUFDZCxFQUFFLE9BQU9NLE9BQU87UUFDZFAsUUFBUU8sS0FBSyxDQUFDLGdCQUFnQkE7SUFDaEM7QUFDRixFQUFDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVTRVJcXERlc2t0b3BcXHZvbHVudGVlcmluZy13ZWJzaXRlXFxsaWJcXGZpcmViYXNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluaXRpYWxpemVBcHAgfSBmcm9tICdmaXJlYmFzZS9hcHAnXG5pbXBvcnQgeyBnZXRBdXRoIH0gZnJvbSAnZmlyZWJhc2UvYXV0aCdcbmltcG9ydCB7IFxuICBnZXRGaXJlc3RvcmUsIFxuICBjb2xsZWN0aW9uLCBcbiAgYWRkRG9jLCBcbiAgZ2V0RG9jcywgXG4gIGRvYywgXG4gIHVwZGF0ZURvYywgXG4gIGRlbGV0ZURvYywgXG4gIHF1ZXJ5LCBcbiAgd2hlcmUsIFxuICBvcmRlckJ5LFxuICBUaW1lc3RhbXAsXG4gIERvY3VtZW50RGF0YSxcbiAgUXVlcnlEb2N1bWVudFNuYXBzaG90LFxuICBGaXJlc3RvcmVFcnJvclxufSBmcm9tICdmaXJlYmFzZS9maXJlc3RvcmUnXG5pbXBvcnQgeyBnZXRTdG9yYWdlIH0gZnJvbSAnZmlyZWJhc2Uvc3RvcmFnZSdcblxuY29uc3QgZmlyZWJhc2VDb25maWcgPSB7XG4gIGFwaUtleTogXCJBSXphU3lDaUpGU3EzX3N5NHdETjJRbmNhTnlxTzFNbFNtdERuMlFcIixcbiAgYXV0aERvbWFpbjogXCJ2b2x1bnRlZXItYTYxZDMuZmlyZWJhc2VhcHAuY29tXCIsXG4gIHByb2plY3RJZDogXCJ2b2x1bnRlZXItYTYxZDNcIixcbiAgc3RvcmFnZUJ1Y2tldDogXCJ2b2x1bnRlZXItYTYxZDMuZmlyZWJhc2VzdG9yYWdlLmFwcFwiLFxuICBtZXNzYWdpbmdTZW5kZXJJZDogXCI3ODM3NTM1ODY4NjVcIixcbiAgYXBwSWQ6IFwiMTo3ODM3NTM1ODY4NjU6d2ViOjg0YTNmMDcxZTMzYTQ5MzRkYTlhOTBcIixcbiAgbWVhc3VyZW1lbnRJZDogXCJHLUYyVzhUUzdHQjlcIlxufTtcblxuY29uc3QgYXBwID0gaW5pdGlhbGl6ZUFwcChmaXJlYmFzZUNvbmZpZylcbmV4cG9ydCBjb25zdCBhdXRoID0gZ2V0QXV0aChhcHApXG5leHBvcnQgY29uc3QgZGIgPSBnZXRGaXJlc3RvcmUoYXBwKVxuZXhwb3J0IGNvbnN0IHN0b3JhZ2UgPSBnZXRTdG9yYWdlKGFwcClcblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNvbnZlcnQgRmlyZXN0b3JlIHRpbWVzdGFtcHNcbmNvbnN0IGNvbnZlcnRUaW1lc3RhbXAgPSAoZGF0YTogRG9jdW1lbnREYXRhKSA9PiB7XG4gIGNvbnN0IGNvbnZlcnRlZCA9IHsgLi4uZGF0YSB9XG4gIE9iamVjdC5rZXlzKGNvbnZlcnRlZCkuZm9yRWFjaChrZXkgPT4ge1xuICAgIGlmIChjb252ZXJ0ZWRba2V5XSBpbnN0YW5jZW9mIFRpbWVzdGFtcCkge1xuICAgICAgY29udmVydGVkW2tleV0gPSBjb252ZXJ0ZWRba2V5XS50b0RhdGUoKS50b0lTT1N0cmluZygpXG4gICAgfVxuICB9KVxuICByZXR1cm4gY29udmVydGVkXG59XG5cblxuLy8gRGVmaW5lIGludGVyZmFjZXMgZm9yIHR5cGUgc2FmZXR5XG5pbnRlcmZhY2UgQmFzZURvY3VtZW50IHtcbiAgaWQ6IHN0cmluZ1xuICBjcmVhdGVkQXQ6IHN0cmluZ1xuICB1cGRhdGVkQXQ/OiBzdHJpbmdcbn1cblxuLy8gRXZlbnQgZnVuY3Rpb25zXG5leHBvcnQgY29uc3QgY3JlYXRlRXZlbnQgPSBhc3luYyAoZXZlbnREYXRhOiBhbnkpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZygnQ3JlYXRpbmcgZXZlbnQgd2l0aCBkYXRhOicsIGV2ZW50RGF0YSlcbiAgICBjb25zdCBkb2NSZWYgPSBhd2FpdCBhZGREb2MoY29sbGVjdGlvbihkYiwgJ2V2ZW50cycpLCB7XG4gICAgICAuLi5ldmVudERhdGEsXG4gICAgICBjcmVhdGVkQXQ6IFRpbWVzdGFtcC5ub3coKSxcbiAgICAgIHVwZGF0ZWRBdDogVGltZXN0YW1wLm5vdygpXG4gICAgfSlcbiAgICBjb25zb2xlLmxvZygnRXZlbnQgY3JlYXRlZCB3aXRoIElEOicsIGRvY1JlZi5pZClcbiAgICByZXR1cm4gZG9jUmVmXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgY3JlYXRpbmcgZXZlbnQ6JywgZXJyb3IpXG4gICAgdGhyb3cgZXJyb3JcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZ2V0RXZlbnRzID0gYXN5bmMgKCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKCdGZXRjaGluZyBhbGwgZXZlbnRzLi4uJylcbiAgICBjb25zdCBxID0gcXVlcnkoY29sbGVjdGlvbihkYiwgJ2V2ZW50cycpLCBvcmRlckJ5KCdjcmVhdGVkQXQnLCAnZGVzYycpKVxuICAgIGNvbnN0IHF1ZXJ5U25hcHNob3QgPSBhd2FpdCBnZXREb2NzKHEpXG4gICAgY29uc3QgZXZlbnRzID0gcXVlcnlTbmFwc2hvdC5kb2NzLm1hcChkb2MgPT4gKHtcbiAgICAgIGlkOiBkb2MuaWQsXG4gICAgICAuLi5jb252ZXJ0VGltZXN0YW1wKGRvYy5kYXRhKCkpXG4gICAgfSkpXG4gICAgY29uc29sZS5sb2coJ0V2ZW50cyBmZXRjaGVkOicsIGV2ZW50cy5sZW5ndGgpXG4gICAgcmV0dXJuIGV2ZW50c1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGV2ZW50czonLCBlcnJvcilcbiAgICB0aHJvdyBlcnJvclxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBnZXRFdmVudHNCeU93bmVyID0gYXN5bmMgKG93bmVySWQ6IHN0cmluZykgPT4ge1xuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKCdGZXRjaGluZyBldmVudHMgZm9yIG93bmVyOicsIG93bmVySWQpXG4gICAgY29uc3QgcSA9IHF1ZXJ5KFxuICAgICAgY29sbGVjdGlvbihkYiwgJ2V2ZW50cycpLCBcbiAgICAgIHdoZXJlKCdvd25lcklkJywgJz09Jywgb3duZXJJZCksXG4gICAgICBvcmRlckJ5KCdjcmVhdGVkQXQnLCAnZGVzYycpXG4gICAgKVxuICAgIGNvbnN0IHF1ZXJ5U25hcHNob3QgPSBhd2FpdCBnZXREb2NzKHEpXG4gICAgY29uc3QgZXZlbnRzID0gcXVlcnlTbmFwc2hvdC5kb2NzLm1hcChkb2MgPT4gKHtcbiAgICAgIGlkOiBkb2MuaWQsXG4gICAgICAuLi5jb252ZXJ0VGltZXN0YW1wKGRvYy5kYXRhKCkpXG4gICAgfSkpXG4gICAgY29uc29sZS5sb2coYEV2ZW50cyBmZXRjaGVkIGZvciBvd25lciAke293bmVySWR9OmAsIGV2ZW50cy5sZW5ndGgpXG4gICAgcmV0dXJuIGV2ZW50c1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGV2ZW50cyBieSBvd25lcjonLCBlcnJvcilcbiAgICAvLyBGaXg6IFByb3BlciB0eXBlIGNoZWNraW5nIGZvciBGaXJlc3RvcmVFcnJvclxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmICdjb2RlJyBpbiBlcnJvciAmJiAoZXJyb3IgYXMgRmlyZXN0b3JlRXJyb3IpLmNvZGUgPT09ICdmYWlsZWQtcHJlY29uZGl0aW9uJykge1xuICAgICAgY29uc29sZS5sb2coJ1JldHJ5aW5nIHdpdGhvdXQgb3JkZXJCeSBkdWUgdG8gbWlzc2luZyBpbmRleC4uLicpXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBxID0gcXVlcnkoXG4gICAgICAgICAgY29sbGVjdGlvbihkYiwgJ2V2ZW50cycpLCBcbiAgICAgICAgICB3aGVyZSgnb3duZXJJZCcsICc9PScsIG93bmVySWQpXG4gICAgICAgIClcbiAgICAgICAgY29uc3QgcXVlcnlTbmFwc2hvdCA9IGF3YWl0IGdldERvY3MocSlcbiAgICAgICAgY29uc3QgZXZlbnRzID0gcXVlcnlTbmFwc2hvdC5kb2NzLm1hcChkb2MgPT4gKHtcbiAgICAgICAgICBpZDogZG9jLmlkLFxuICAgICAgICAgIC4uLmNvbnZlcnRUaW1lc3RhbXAoZG9jLmRhdGEoKSlcbiAgICAgICAgfSkpXG4gICAgICAgIC8vIFNvcnQgbWFudWFsbHkgYnkgY3JlYXRlZEF0XG4gICAgICAgIGV2ZW50cy5zb3J0KChhLCBiKSA9PiBuZXcgRGF0ZShiLmNyZWF0ZWRBdCBhcyBzdHJpbmcpLmdldFRpbWUoKSAtIG5ldyBEYXRlKGEuY3JlYXRlZEF0IGFzIHN0cmluZykuZ2V0VGltZSgpKVxuICAgICAgICBjb25zb2xlLmxvZyhgRXZlbnRzIGZldGNoZWQgZm9yIG93bmVyICR7b3duZXJJZH0gKHdpdGhvdXQgaW5kZXgpOmAsIGV2ZW50cy5sZW5ndGgpXG4gICAgICAgIHJldHVybiBldmVudHNcbiAgICAgIH0gY2F0Y2ggKHJldHJ5RXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignUmV0cnkgZmFpbGVkOicsIHJldHJ5RXJyb3IpXG4gICAgICAgIHRocm93IHJldHJ5RXJyb3JcbiAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgZXJyb3JcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgdXBkYXRlRXZlbnQgPSBhc3luYyAoZXZlbnRJZDogc3RyaW5nLCB1cGRhdGVzOiBhbnkpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZyhgVXBkYXRpbmcgZXZlbnQgJHtldmVudElkfTpgLCB1cGRhdGVzKVxuICAgIGNvbnN0IGV2ZW50UmVmID0gZG9jKGRiLCAnZXZlbnRzJywgZXZlbnRJZClcbiAgICBhd2FpdCB1cGRhdGVEb2MoZXZlbnRSZWYsIHtcbiAgICAgIC4uLnVwZGF0ZXMsXG4gICAgICB1cGRhdGVkQXQ6IFRpbWVzdGFtcC5ub3coKVxuICAgIH0pXG4gICAgY29uc29sZS5sb2coYEV2ZW50ICR7ZXZlbnRJZH0gdXBkYXRlZCBzdWNjZXNzZnVsbHlgKVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwZGF0aW5nIGV2ZW50OicsIGVycm9yKVxuICAgIHRocm93IGVycm9yXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGRlbGV0ZUV2ZW50ID0gYXN5bmMgKGV2ZW50SWQ6IHN0cmluZykgPT4ge1xuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKCdEZWxldGluZyBldmVudDonLCBldmVudElkKVxuICAgIGF3YWl0IGRlbGV0ZURvYyhkb2MoZGIsICdldmVudHMnLCBldmVudElkKSlcbiAgICBjb25zb2xlLmxvZyhgRXZlbnQgJHtldmVudElkfSBkZWxldGVkIHN1Y2Nlc3NmdWxseWApXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZGVsZXRpbmcgZXZlbnQ6JywgZXJyb3IpXG4gICAgdGhyb3cgZXJyb3JcbiAgfVxufVxuXG4vLyBBcHBsaWNhdGlvbiBmdW5jdGlvbnNcbmV4cG9ydCBjb25zdCBjcmVhdGVBcHBsaWNhdGlvbiA9IGFzeW5jIChhcHBsaWNhdGlvbkRhdGE6IGFueSkgPT4ge1xuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKCdDcmVhdGluZyBhcHBsaWNhdGlvbiB3aXRoIGRhdGE6JywgYXBwbGljYXRpb25EYXRhKVxuICAgIGNvbnN0IGRvY1JlZiA9IGF3YWl0IGFkZERvYyhjb2xsZWN0aW9uKGRiLCAnYXBwbGljYXRpb25zJyksIHtcbiAgICAgIC4uLmFwcGxpY2F0aW9uRGF0YSxcbiAgICAgIHN0YXR1czogJ3BlbmRpbmcnLFxuICAgICAgY3JlYXRlZEF0OiBUaW1lc3RhbXAubm93KClcbiAgICB9KVxuICAgIGNvbnNvbGUubG9nKCdBcHBsaWNhdGlvbiBjcmVhdGVkIHdpdGggSUQ6JywgZG9jUmVmLmlkKVxuICAgIHJldHVybiBkb2NSZWZcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjcmVhdGluZyBhcHBsaWNhdGlvbjonLCBlcnJvcilcbiAgICB0aHJvdyBlcnJvclxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBnZXRBcHBsaWNhdGlvbnNCeUV2ZW50ID0gYXN5bmMgKGV2ZW50SWQ6IHN0cmluZykgPT4ge1xuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKCdGZXRjaGluZyBhcHBsaWNhdGlvbnMgZm9yIGV2ZW50OicsIGV2ZW50SWQpXG4gICAgY29uc3QgcSA9IHF1ZXJ5KFxuICAgICAgY29sbGVjdGlvbihkYiwgJ2FwcGxpY2F0aW9ucycpLFxuICAgICAgd2hlcmUoJ2V2ZW50SWQnLCAnPT0nLCBldmVudElkKVxuICAgIClcbiAgICBjb25zdCBxdWVyeVNuYXBzaG90ID0gYXdhaXQgZ2V0RG9jcyhxKVxuICAgIGNvbnN0IGFwcGxpY2F0aW9ucyA9IHF1ZXJ5U25hcHNob3QuZG9jcy5tYXAoZG9jID0+ICh7XG4gICAgICBpZDogZG9jLmlkLFxuICAgICAgLi4uY29udmVydFRpbWVzdGFtcChkb2MuZGF0YSgpKVxuICAgIH0pKVxuICAgIGNvbnNvbGUubG9nKGBBcHBsaWNhdGlvbnMgZmV0Y2hlZCBmb3IgZXZlbnQgJHtldmVudElkfTpgLCBhcHBsaWNhdGlvbnMubGVuZ3RoKVxuICAgIHJldHVybiBhcHBsaWNhdGlvbnNcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBhcHBsaWNhdGlvbnMgYnkgZXZlbnQ6JywgZXJyb3IpXG4gICAgdGhyb3cgZXJyb3JcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZ2V0QXBwbGljYXRpb25zQnlVc2VyID0gYXN5bmMgKHVzZXJJZDogc3RyaW5nKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc29sZS5sb2coJ0ZldGNoaW5nIGFwcGxpY2F0aW9ucyBmb3IgdXNlcjonLCB1c2VySWQpXG4gICAgLy8gRmlyc3QgdHJ5IHdpdGggb3JkZXJCeVxuICAgIHRyeSB7XG4gICAgICBjb25zdCBxID0gcXVlcnkoXG4gICAgICAgIGNvbGxlY3Rpb24oZGIsICdhcHBsaWNhdGlvbnMnKSxcbiAgICAgICAgd2hlcmUoJ3VzZXJJZCcsICc9PScsIHVzZXJJZCksXG4gICAgICAgIG9yZGVyQnkoJ2NyZWF0ZWRBdCcsICdkZXNjJylcbiAgICAgIClcbiAgICAgIGNvbnN0IHF1ZXJ5U25hcHNob3QgPSBhd2FpdCBnZXREb2NzKHEpXG4gICAgICBjb25zdCBhcHBsaWNhdGlvbnMgPSBxdWVyeVNuYXBzaG90LmRvY3MubWFwKGRvYyA9PiAoe1xuICAgICAgICBpZDogZG9jLmlkLFxuICAgICAgICAuLi5jb252ZXJ0VGltZXN0YW1wKGRvYy5kYXRhKCkpXG4gICAgICB9KSlcbiAgICAgIGNvbnNvbGUubG9nKGBBcHBsaWNhdGlvbnMgZmV0Y2hlZCBmb3IgdXNlciAke3VzZXJJZH06YCwgYXBwbGljYXRpb25zLmxlbmd0aClcbiAgICAgIHJldHVybiBhcHBsaWNhdGlvbnNcbiAgICB9IGNhdGNoIChpbmRleEVycm9yKSB7XG4gICAgICAvLyBGaXg6IFByb3BlciB0eXBlIGNoZWNraW5nIGZvciBGaXJlc3RvcmVFcnJvclxuICAgICAgaWYgKGluZGV4RXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAnY29kZScgaW4gaW5kZXhFcnJvciAmJiAoaW5kZXhFcnJvciBhcyBGaXJlc3RvcmVFcnJvcikuY29kZSA9PT0gJ2ZhaWxlZC1wcmVjb25kaXRpb24nKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdJbmRleCBub3QgZm91bmQsIGZldGNoaW5nIHdpdGhvdXQgb3JkZXJCeSBhbmQgc29ydGluZyBtYW51YWxseS4uLicpXG4gICAgICAgIGNvbnN0IHEgPSBxdWVyeShcbiAgICAgICAgICBjb2xsZWN0aW9uKGRiLCAnYXBwbGljYXRpb25zJyksXG4gICAgICAgICAgd2hlcmUoJ3VzZXJJZCcsICc9PScsIHVzZXJJZClcbiAgICAgICAgKVxuICAgICAgICBjb25zdCBxdWVyeVNuYXBzaG90ID0gYXdhaXQgZ2V0RG9jcyhxKVxuICAgICAgICBjb25zdCBhcHBsaWNhdGlvbnMgPSBxdWVyeVNuYXBzaG90LmRvY3MubWFwKGRvYyA9PiAoe1xuICAgICAgICAgIGlkOiBkb2MuaWQsXG4gICAgICAgICAgLi4uY29udmVydFRpbWVzdGFtcChkb2MuZGF0YSgpKVxuICAgICAgICB9KSlcbiAgICAgICAgXG4gICAgICAgIC8vIEZpeDogUHJvcGVyIHR5cGUgYXNzZXJ0aW9uIGZvciBkYXRlIHN0cmluZ3NcbiAgICAgICAgYXBwbGljYXRpb25zLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICBjb25zdCBkYXRlQSA9IG5ldyBEYXRlKGEuY3JlYXRlZEF0KS5nZXRUaW1lKClcbiAgICAgICAgICBjb25zdCBkYXRlQiA9IG5ldyBEYXRlKGIuY3JlYXRlZEF0IGFzIHN0cmluZykuZ2V0VGltZSgpXG4gICAgICAgICAgcmV0dXJuIGRhdGVCIC0gZGF0ZUFcbiAgICAgICAgfSlcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKGBBcHBsaWNhdGlvbnMgZmV0Y2hlZCBmb3IgdXNlciAke3VzZXJJZH0gKG1hbnVhbCBzb3J0KTpgLCBhcHBsaWNhdGlvbnMubGVuZ3RoKVxuICAgICAgICByZXR1cm4gYXBwbGljYXRpb25zXG4gICAgICB9XG4gICAgICB0aHJvdyBpbmRleEVycm9yXG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGFwcGxpY2F0aW9ucyBieSB1c2VyOicsIGVycm9yKVxuICAgIHRocm93IGVycm9yXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHVwZGF0ZUFwcGxpY2F0aW9uU3RhdHVzID0gYXN5bmMgKGFwcGxpY2F0aW9uSWQ6IHN0cmluZywgc3RhdHVzOiAnYXBwcm92ZWQnIHwgJ2RlY2xpbmVkJykgPT4ge1xuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKGBVcGRhdGluZyBhcHBsaWNhdGlvbiAke2FwcGxpY2F0aW9uSWR9IHN0YXR1cyB0bzpgLCBzdGF0dXMpXG4gICAgY29uc3QgYXBwbGljYXRpb25SZWYgPSBkb2MoZGIsICdhcHBsaWNhdGlvbnMnLCBhcHBsaWNhdGlvbklkKVxuICAgIGF3YWl0IHVwZGF0ZURvYyhhcHBsaWNhdGlvblJlZiwge1xuICAgICAgc3RhdHVzLFxuICAgICAgdXBkYXRlZEF0OiBUaW1lc3RhbXAubm93KClcbiAgICB9KVxuICAgIGNvbnNvbGUubG9nKGBBcHBsaWNhdGlvbiAke2FwcGxpY2F0aW9uSWR9IHN0YXR1cyB1cGRhdGVkIHN1Y2Nlc3NmdWxseWApXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBkYXRpbmcgYXBwbGljYXRpb24gc3RhdHVzOicsIGVycm9yKVxuICAgIHRocm93IGVycm9yXG4gIH1cbn1cblxuLy8gRGVidWcgZnVuY3Rpb24gdG8gY2hlY2sgY29sbGVjdGlvbnNcbmV4cG9ydCBjb25zdCBkZWJ1Z0NvbGxlY3Rpb25zID0gYXN5bmMgKCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKCc9PT0gREVCVUc6IENoZWNraW5nIGNvbGxlY3Rpb25zID09PScpXG4gICAgXG4gICAgLy8gQ2hlY2sgZXZlbnRzIGNvbGxlY3Rpb25cbiAgICBjb25zdCBldmVudHNTbmFwc2hvdCA9IGF3YWl0IGdldERvY3MoY29sbGVjdGlvbihkYiwgJ2V2ZW50cycpKVxuICAgIGNvbnNvbGUubG9nKCdFdmVudHMgY29sbGVjdGlvbiBzaXplOicsIGV2ZW50c1NuYXBzaG90LnNpemUpXG4gICAgZXZlbnRzU25hcHNob3QuZG9jcy5mb3JFYWNoKGRvYyA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnRXZlbnQ6JywgZG9jLmlkLCBkb2MuZGF0YSgpKVxuICAgIH0pXG4gICAgXG4gICAgLy8gQ2hlY2sgYXBwbGljYXRpb25zIGNvbGxlY3Rpb25cbiAgICBjb25zdCBhcHBsaWNhdGlvbnNTbmFwc2hvdCA9IGF3YWl0IGdldERvY3MoY29sbGVjdGlvbihkYiwgJ2FwcGxpY2F0aW9ucycpKVxuICAgIGNvbnNvbGUubG9nKCdBcHBsaWNhdGlvbnMgY29sbGVjdGlvbiBzaXplOicsIGFwcGxpY2F0aW9uc1NuYXBzaG90LnNpemUpXG4gICAgYXBwbGljYXRpb25zU25hcHNob3QuZG9jcy5mb3JFYWNoKGRvYyA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnQXBwbGljYXRpb246JywgZG9jLmlkLCBkb2MuZGF0YSgpKVxuICAgIH0pXG4gICAgXG4gICAgY29uc29sZS5sb2coJz09PSBFTkQgREVCVUcgPT09JylcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdEZWJ1ZyBlcnJvcjonLCBlcnJvcilcbiAgfVxufSJdLCJuYW1lcyI6WyJpbml0aWFsaXplQXBwIiwiZ2V0QXV0aCIsImdldEZpcmVzdG9yZSIsImNvbGxlY3Rpb24iLCJhZGREb2MiLCJnZXREb2NzIiwiZG9jIiwidXBkYXRlRG9jIiwiZGVsZXRlRG9jIiwicXVlcnkiLCJ3aGVyZSIsIm9yZGVyQnkiLCJUaW1lc3RhbXAiLCJnZXRTdG9yYWdlIiwiZmlyZWJhc2VDb25maWciLCJhcGlLZXkiLCJhdXRoRG9tYWluIiwicHJvamVjdElkIiwic3RvcmFnZUJ1Y2tldCIsIm1lc3NhZ2luZ1NlbmRlcklkIiwiYXBwSWQiLCJtZWFzdXJlbWVudElkIiwiYXBwIiwiYXV0aCIsImRiIiwic3RvcmFnZSIsImNvbnZlcnRUaW1lc3RhbXAiLCJkYXRhIiwiY29udmVydGVkIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJ0b0RhdGUiLCJ0b0lTT1N0cmluZyIsImNyZWF0ZUV2ZW50IiwiZXZlbnREYXRhIiwiY29uc29sZSIsImxvZyIsImRvY1JlZiIsImNyZWF0ZWRBdCIsIm5vdyIsInVwZGF0ZWRBdCIsImlkIiwiZXJyb3IiLCJnZXRFdmVudHMiLCJxIiwicXVlcnlTbmFwc2hvdCIsImV2ZW50cyIsImRvY3MiLCJtYXAiLCJsZW5ndGgiLCJnZXRFdmVudHNCeU93bmVyIiwib3duZXJJZCIsIkVycm9yIiwiY29kZSIsInNvcnQiLCJhIiwiYiIsIkRhdGUiLCJnZXRUaW1lIiwicmV0cnlFcnJvciIsInVwZGF0ZUV2ZW50IiwiZXZlbnRJZCIsInVwZGF0ZXMiLCJldmVudFJlZiIsImRlbGV0ZUV2ZW50IiwiY3JlYXRlQXBwbGljYXRpb24iLCJhcHBsaWNhdGlvbkRhdGEiLCJzdGF0dXMiLCJnZXRBcHBsaWNhdGlvbnNCeUV2ZW50IiwiYXBwbGljYXRpb25zIiwiZ2V0QXBwbGljYXRpb25zQnlVc2VyIiwidXNlcklkIiwiaW5kZXhFcnJvciIsImRhdGVBIiwiZGF0ZUIiLCJ1cGRhdGVBcHBsaWNhdGlvblN0YXR1cyIsImFwcGxpY2F0aW9uSWQiLCJhcHBsaWNhdGlvblJlZiIsImRlYnVnQ29sbGVjdGlvbnMiLCJldmVudHNTbmFwc2hvdCIsInNpemUiLCJhcHBsaWNhdGlvbnNTbmFwc2hvdCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/firebase.ts\n"));

/***/ })

});