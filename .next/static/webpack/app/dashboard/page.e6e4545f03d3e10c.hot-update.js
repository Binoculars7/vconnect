"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/page",{

/***/ "(app-pages-browser)/./lib/firebase.ts":
/*!*************************!*\
  !*** ./lib/firebase.ts ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   auth: () => (/* binding */ auth),\n/* harmony export */   createApplication: () => (/* binding */ createApplication),\n/* harmony export */   createEvent: () => (/* binding */ createEvent),\n/* harmony export */   db: () => (/* binding */ db),\n/* harmony export */   debugCollections: () => (/* binding */ debugCollections),\n/* harmony export */   deleteEvent: () => (/* binding */ deleteEvent),\n/* harmony export */   getApplicationsByEvent: () => (/* binding */ getApplicationsByEvent),\n/* harmony export */   getApplicationsByUser: () => (/* binding */ getApplicationsByUser),\n/* harmony export */   getEvents: () => (/* binding */ getEvents),\n/* harmony export */   getEventsByOwner: () => (/* binding */ getEventsByOwner),\n/* harmony export */   storage: () => (/* binding */ storage),\n/* harmony export */   updateApplicationStatus: () => (/* binding */ updateApplicationStatus),\n/* harmony export */   updateEvent: () => (/* binding */ updateEvent)\n/* harmony export */ });\n/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/app */ \"(app-pages-browser)/./node_modules/firebase/app/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/auth */ \"(app-pages-browser)/./node_modules/firebase/auth/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_storage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! firebase/storage */ \"(app-pages-browser)/./node_modules/firebase/storage/dist/esm/index.esm.js\");\n\n\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCiJFSq3_sy4wDN2QncaNyqO1MlSmtDn2Q\",\n    authDomain: \"volunteer-a61d3.firebaseapp.com\",\n    projectId: \"volunteer-a61d3\",\n    storageBucket: \"volunteer-a61d3.firebasestorage.app\",\n    messagingSenderId: \"783753586865\",\n    appId: \"1:783753586865:web:84a3f071e33a4934da9a90\",\n    measurementId: \"G-F2W8TS7GB9\"\n};\nconst app = (0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp)(firebaseConfig);\nconst auth = (0,firebase_auth__WEBPACK_IMPORTED_MODULE_1__.getAuth)(app);\nconst db = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getFirestore)(app);\nconst storage = (0,firebase_storage__WEBPACK_IMPORTED_MODULE_3__.getStorage)(app);\n// Helper function to convert Firestore timestamps\nconst convertTimestamp = (data)=>{\n    const converted = {\n        ...data\n    };\n    Object.keys(converted).forEach((key)=>{\n        if (converted[key] instanceof firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.Timestamp) {\n            converted[key] = converted[key].toDate().toISOString();\n        }\n    });\n    return converted;\n};\n// Event functions\nconst createEvent = async (eventData)=>{\n    try {\n        console.log('Creating event with data:', eventData);\n        const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, 'events'), {\n            ...eventData,\n            createdAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.Timestamp.now(),\n            updatedAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.Timestamp.now()\n        });\n        console.log('Event created with ID:', docRef.id);\n        return docRef;\n    } catch (error) {\n        console.error('Error creating event:', error);\n        throw error;\n    }\n};\nconst getEvents = async ()=>{\n    try {\n        console.log('Fetching all events...');\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, 'events'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.orderBy)('createdAt', 'desc'));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(q);\n        const events = querySnapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...convertTimestamp(doc.data())\n            }));\n        console.log('Events fetched:', events.length);\n        return events;\n    } catch (error) {\n        console.error('Error fetching events:', error);\n        throw error;\n    }\n};\nconst getEventsByOwner = async (ownerId)=>{\n    try {\n        console.log('Fetching events for owner:', ownerId);\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, 'events'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)('ownerId', '==', ownerId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.orderBy)('createdAt', 'desc'));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(q);\n        const events = querySnapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...convertTimestamp(doc.data())\n            }));\n        console.log(\"Events fetched for owner \".concat(ownerId, \":\"), events.length);\n        return events;\n    } catch (error) {\n        console.error('Error fetching events by owner:', error);\n        // Fix: Proper type checking for FirestoreError\n        if (error instanceof Error && 'code' in error && error.code === 'failed-precondition') {\n            console.log('Retrying without orderBy due to missing index...');\n            try {\n                const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, 'events'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)('ownerId', '==', ownerId));\n                const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(q);\n                const events = querySnapshot.docs.map((doc)=>({\n                        id: doc.id,\n                        ...convertTimestamp(doc.data())\n                    }));\n                // Sort manually by createdAt\n                events.sort((a, b)=>new Date(createdAt).getTime() - new Date(a.createdAt).getTime());\n                console.log(\"Events fetched for owner \".concat(ownerId, \" (without index):\"), events.length);\n                return events;\n            } catch (retryError) {\n                console.error('Retry failed:', retryError);\n                throw retryError;\n            }\n        }\n        throw error;\n    }\n};\nconst updateEvent = async (eventId, updates)=>{\n    try {\n        console.log(\"Updating event \".concat(eventId, \":\"), updates);\n        const eventRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, 'events', eventId);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.updateDoc)(eventRef, {\n            ...updates,\n            updatedAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.Timestamp.now()\n        });\n        console.log(\"Event \".concat(eventId, \" updated successfully\"));\n    } catch (error) {\n        console.error('Error updating event:', error);\n        throw error;\n    }\n};\nconst deleteEvent = async (eventId)=>{\n    try {\n        console.log('Deleting event:', eventId);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.deleteDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, 'events', eventId));\n        console.log(\"Event \".concat(eventId, \" deleted successfully\"));\n    } catch (error) {\n        console.error('Error deleting event:', error);\n        throw error;\n    }\n};\n// Application functions\nconst createApplication = async (applicationData)=>{\n    try {\n        console.log('Creating application with data:', applicationData);\n        const docRef = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.addDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, 'applications'), {\n            ...applicationData,\n            status: 'pending',\n            createdAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.Timestamp.now()\n        });\n        console.log('Application created with ID:', docRef.id);\n        return docRef;\n    } catch (error) {\n        console.error('Error creating application:', error);\n        throw error;\n    }\n};\nconst getApplicationsByEvent = async (eventId)=>{\n    try {\n        console.log('Fetching applications for event:', eventId);\n        const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, 'applications'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)('eventId', '==', eventId));\n        const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(q);\n        const applications = querySnapshot.docs.map((doc)=>({\n                id: doc.id,\n                ...convertTimestamp(doc.data())\n            }));\n        console.log(\"Applications fetched for event \".concat(eventId, \":\"), applications.length);\n        return applications;\n    } catch (error) {\n        console.error('Error fetching applications by event:', error);\n        throw error;\n    }\n};\nconst getApplicationsByUser = async (userId)=>{\n    try {\n        console.log('Fetching applications for user:', userId);\n        // First try with orderBy\n        try {\n            const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, 'applications'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)('userId', '==', userId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.orderBy)('createdAt', 'desc'));\n            const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(q);\n            const applications = querySnapshot.docs.map((doc)=>({\n                    id: doc.id,\n                    ...convertTimestamp(doc.data())\n                }));\n            console.log(\"Applications fetched for user \".concat(userId, \":\"), applications.length);\n            return applications;\n        } catch (indexError) {\n            // Fix: Proper type checking for FirestoreError\n            if (indexError instanceof Error && 'code' in indexError && indexError.code === 'failed-precondition') {\n                console.log('Index not found, fetching without orderBy and sorting manually...');\n                const q = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, 'applications'), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)('userId', '==', userId));\n                const querySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)(q);\n                const applications = querySnapshot.docs.map((doc)=>({\n                        id: doc.id,\n                        ...convertTimestamp(doc.data())\n                    }));\n                // Fix: Proper type assertion for date strings\n                applications.sort((a, b)=>{\n                    const dateA = new Date(a.createdAt).getTime();\n                    const dateB = new Date(b.createdAt).getTime();\n                    return dateB - dateA;\n                });\n                console.log(\"Applications fetched for user \".concat(userId, \" (manual sort):\"), applications.length);\n                return applications;\n            }\n            throw indexError;\n        }\n    } catch (error) {\n        console.error('Error fetching applications by user:', error);\n        throw error;\n    }\n};\nconst updateApplicationStatus = async (applicationId, status)=>{\n    try {\n        console.log(\"Updating application \".concat(applicationId, \" status to:\"), status);\n        const applicationRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(db, 'applications', applicationId);\n        await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.updateDoc)(applicationRef, {\n            status,\n            updatedAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.Timestamp.now()\n        });\n        console.log(\"Application \".concat(applicationId, \" status updated successfully\"));\n    } catch (error) {\n        console.error('Error updating application status:', error);\n        throw error;\n    }\n};\n// Debug function to check collections\nconst debugCollections = async ()=>{\n    try {\n        console.log('=== DEBUG: Checking collections ===');\n        // Check events collection\n        const eventsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, 'events'));\n        console.log('Events collection size:', eventsSnapshot.size);\n        eventsSnapshot.docs.forEach((doc)=>{\n            console.log('Event:', doc.id, doc.data());\n        });\n        // Check applications collection\n        const applicationsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(db, 'applications'));\n        console.log('Applications collection size:', applicationsSnapshot.size);\n        applicationsSnapshot.docs.forEach((doc)=>{\n            console.log('Application:', doc.id, doc.data());\n        });\n        console.log('=== END DEBUG ===');\n    } catch (error) {\n        console.error('Debug error:', error);\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/firebase.ts\n"));

/***/ })

});